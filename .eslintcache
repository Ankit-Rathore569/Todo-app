[{"/home/developer/work/react/my-app/src/index.js":"1","/home/developer/work/react/my-app/src/App.js":"2","/home/developer/work/react/my-app/src/reportWebVitals.js":"3","/home/developer/Ankit/Training/my-app/src/index.js":"4","/home/developer/Ankit/Training/my-app/src/App.js":"5","/home/developer/Ankit/Training/my-app/src/reportWebVitals.js":"6","/home/developer/Ankit/Training/my-app/src/components/TodoView.js":"7","/home/developer/Ankit/Training/my-app/src/store.js":"8","/home/developer/Ankit/Training/my-app/src/redux/action/todoAction.js":"9","/home/developer/Ankit/Training/my-app/src/redux/constant/todoConstants.js":"10","/home/developer/Ankit/Training/my-app/src/redux/reducer/todoReducer.js":"11","/home/developer/Ankit/Training/my-app/src/components/DetailView.js":"12","/home/developer/Ankit/Training/my-app/src/components/Completed.js":"13"},{"size":500,"mtime":1612163059949,"results":"14","hashOfConfig":"15"},{"size":528,"mtime":1612163059949,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1612163059949,"results":"17","hashOfConfig":"15"},{"size":593,"mtime":1618831086624,"results":"18","hashOfConfig":"19"},{"size":594,"mtime":1618918174929,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1612163059949,"results":"21","hashOfConfig":"19"},{"size":3018,"mtime":1618915893978,"results":"22","hashOfConfig":"19"},{"size":475,"mtime":1618832707424,"results":"23","hashOfConfig":"19"},{"size":348,"mtime":1618907040116,"results":"24","hashOfConfig":"19"},{"size":97,"mtime":1618854563740,"results":"25","hashOfConfig":"19"},{"size":557,"mtime":1618907074075,"results":"26","hashOfConfig":"19"},{"size":2978,"mtime":1618918117336,"results":"27","hashOfConfig":"19"},{"size":1807,"mtime":1618915970360,"results":"28","hashOfConfig":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wkzt8y",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"1ccgjg0",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/home/developer/work/react/my-app/src/index.js",[],"/home/developer/work/react/my-app/src/App.js",[],"/home/developer/work/react/my-app/src/reportWebVitals.js",[],"/home/developer/Ankit/Training/my-app/src/index.js",[],["57","58"],"/home/developer/Ankit/Training/my-app/src/App.js",[],"/home/developer/Ankit/Training/my-app/src/reportWebVitals.js",[],"/home/developer/Ankit/Training/my-app/src/components/TodoView.js",["59"],"import React, { Fragment, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTodoList } from \"../redux/action/todoAction\";\nimport { Link } from \"react-router-dom\";\n\nconst TodoView = () => {\n    const [addTodo, setAddTodo] = useState(\"\");\n    const [endDate, setendDate] = useState(\"\");\n    const dispatch = useDispatch();\n    const { todolist } = useSelector((state) => state.todoRed);\n\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        var startDate = new Date().toISOString().slice(0, 10);\n\n        dispatch(addTodoList({ addTodo, startDate, endDate }));\n    };\n    var linkStyle = { color: 'lime', cursor: 'pointer', textDecoration: \"none\" };\n    return (\n        <Fragment>\n            <h1>\n                <span className=\"styling\">TODO</span>List\n      </h1>\n            <form onSubmit={submitHandler}>\n                <div className=\"input_div\">\n                    <label className=\"text-white\" htmlFor=\"Inputtext1\">\n                        TODO\n          </label>\n                    <input\n                        type=\"text\"\n                        className=\"input\"\n                        value={addTodo}\n                        id=\"Inputtext1\"\n                        onChange={(e) => setAddTodo(e.target.value)}\n                        placeholder=\"What Do You Want to Do ...\"\n                    />\n\n                    <label className=\"text-white\" htmlFor=\"InputDate1\">\n                        Date of complition\n          </label>\n                    <input\n                        type=\"date\"\n                        className=\"input\"\n                        id=\"InputDate1\"\n                        value={endDate}\n                        onChange={(e) => setendDate(e.target.value)}\n                    />\n\n                    <button className=\"addButton\">\n                        <i className=\"fas fa-plus\"></i>\n                    </button>\n                </div>\n            </form>\n            <div className=\"container\">\n                <table className=\"table table-dark\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">S.No</th>\n                            <th scope=\"col\">Todo</th>\n                            <th scope=\"col\">Detailed View</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {todolist.map((item, index) => (\n                            <tr key={index}>\n                                <th scope=\"row\">{index}</th>\n                                <td>{item.addTodo.slice(0, 5) + \"...\"}</td>\n                                <td>\n                                    <Link to=\"/detailview\"><i className=\"fas fa-eye color-white\"></i></Link>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            <div></div>\n        </Fragment>\n    );\n};\n\nexport default TodoView;\n","/home/developer/Ankit/Training/my-app/src/store.js",[],"/home/developer/Ankit/Training/my-app/src/redux/action/todoAction.js",[],"/home/developer/Ankit/Training/my-app/src/redux/constant/todoConstants.js",[],"/home/developer/Ankit/Training/my-app/src/redux/reducer/todoReducer.js",[],"/home/developer/Ankit/Training/my-app/src/components/DetailView.js",[],"/home/developer/Ankit/Training/my-app/src/components/Completed.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":19,"column":9,"nodeType":"66","messageId":"67","endLine":19,"endColumn":18},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'linkStyle' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]